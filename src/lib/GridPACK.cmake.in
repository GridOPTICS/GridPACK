# -*- mode: cmake -*-
#
#     Copyright (c) 2013 Battelle Memorial Institute
#     Licensed under modified BSD License. A copy of this license can be
#     found
#     in the LICENSE file in the top level directory of this distribution.
#
# -------------------------------------------------------------
# file: FindGridPACK.cmake.in
# -------------------------------------------------------------
# -------------------------------------------------------------
# Created January  8, 2014 by William A. Perkins
# -------------------------------------------------------------

function(gridpack_setup)

  if (NOT GRIDPACK_DIR)
    set(GRIDPACK_DIR @CMAKE_INSTALL_PREFIX@
      CACHE STRING "GridPACK installation directory")
  endif()

  set(gp_include "${GRIDPACK_DIR}/include")
  
  set(GRIDPACK_LIB_DIR "${GRIDPACK_DIR}/lib")

  set(GRIDPACK_HAVE_PETSC @PETSC_FOUND@)
  set(GRIDPACK_HAVE_PARMETIS @PARMETIS_FOUND@)
  set(GRIDPACK_HAVE_GA @GA_FOUND@)
  set(GRIDPACK_HAVE_CPLEX @USE_CPLEX@)
  set(GRIDPACK_HAVE_GLPK @USE_GLPK@)
  set(GRIDPACK_HAVE_GOSS @GOSS_DIR@)
  set(GRIDPACK_HAVE_APR @APR_DIR@)
  set(GRIDPACK_USE_OLD_PETSC @USE_OLD_PETSC@)

  set(ENABLE_ENVIRONMENT_FROM_COMM @ENABLE_ENVIRONMENT_FROM_COMM@)

  find_library(GRIDPACK_COMPONENTS_LIBRARY
    NAMES gridpack_components
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_ANALYSIS_LIBRARY
    NAMES gridpack_analysis
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_CONFIGURATION_LIBRARY
    NAMES gridpack_configuration
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_ENVIRONMENT_LIBRARY
    NAMES gridpack_environment
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_MATH_LIBRARY
    NAMES gridpack_math
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_PARALLEL_LIBRARY
    NAMES gridpack_parallel
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_PARTITION_LIBRARY
    NAMES gridpack_partition
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_TIMER_LIBRARY
    NAMES gridpack_timer
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_STREAM_LIBRARY
    NAMES gridpack_stream
    HINTS ${GRIDPACK_LIB_DIR}
  )

  message(STATUS "GRIDPACK_HAVE_GOSS: ${GRIDPACK_HAVE_GOSS}")
  if (GRIDPACK_HAVE_GOSS) 
  message(STATUS "Adding GRIDPACK_GOSS library")
  find_library(GRIDPACK_GOSS_LIBRARY
    NAMES gridpack_goss
    HINTS ${GRIDPACK_LIB_DIR}
  )
  endif()
  message(STATUS "GRIDPACK_GOSS_LIBRARY: ${GRIDPACK_GOSS_LIBRARY}")

  find_library(GRIDPACK_YMATRIX_COMPONENTS_LIBRARY
    NAMES gridpack_ymatrix_components
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_PFMATRIX_COMPONENTS_LIBRARY
    NAMES gridpack_pfmatrix_components
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_DSMATRIX_COMPONENTS_LIBRARY
    NAMES gridpack_dsmatrix_components
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_KDSMATRIX_COMPONENTS_LIBRARY
    NAMES gridpack_kdsmatrix_components
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_SEMATRIX_COMPONENTS_LIBRARY
    NAMES gridpack_sematrix_components
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_POWERFLOW_MODULE_LIBRARY
    NAMES gridpack_powerflow_module
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_HADREC_MODULE_LIBRARY
    NAMES gridpack_hadrec_module
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_DYNAMIC_SIMULATION_FULL_MODULE_LIBRARY
    NAMES gridpack_dynamic_simulation_full_y_module
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_KALMAN_DS_MODULE_LIBRARY
    NAMES gridpack_kalmands_module
    HINTS ${GRIDPACK_LIB_DIR}
  )

  find_library(GRIDPACK_STATE_ESTIMATION_MODULE_LIBRARY
    NAMES gridpack_state_estimation_module
    HINTS ${GRIDPACK_LIB_DIR}
  )

  set(gp_libs
    ${GRIDPACK_POWERFLOW_MODULE_LIBRARY}
    ${GRIDPACK_DYNAMIC_SIMULATION_FULL_MODULE_LIBRARY}
    ${GRIDPACK_KALMAN_DS_MODULE_LIBRARY}
    ${GRIDPACK_STATE_ESTIMATION_MODULE_LIBRARY}
    ${GRIDPACK_HADREC_MODULE_LIBRARY}
    ${GRIDPACK_YMATRIX_COMPONENTS_LIBRARY}
    ${GRIDPACK_PFMATRIX_COMPONENTS_LIBRARY}
    ${GRIDPACK_DSMATRIX_COMPONENTS_LIBRARY}
    ${GRIDPACK_KDSMATRIX_COMPONENTS_LIBRARY}
    ${GRIDPACK_SEMATRIX_COMPONENTS_LIBRARY}
    ${GRIDPACK_COMPONENTS_LIBRARY}
    ${GRIDPACK_CONFIGURATION_LIBRARY}
    ${GRIDPACK_ENVIRONMENT_LIBRARY}
    ${GRIDPACK_MATH_LIBRARY}
    ${GRIDPACK_GOSS_LIBRARY}
    ${GRIDPACK_PARTITION_LIBRARY}
    ${GRIDPACK_TIMER_LIBRARY}
    ${GRIDPACK_STREAM_LIBRARY}
    ${GRIDPACK_ANALYSIS_LIBRARY}
    ${GRIDPACK_PARALLEL_LIBRARY}
  )

  if (GRIDPACK_HAVE_PARMETIS)   
    list(APPEND gp_include
      @PARMETIS_INCLUDE_DIR@
    )
    list(APPEND gp_libs
      @PARMETIS_LIBRARY@ 
      @METIS_LIBRARY@
    )
  endif()

  if (GRIDPACK_HAVE_PETSC)
    if (USE_OLD_PETSC)
      list(APPEND gp_libs
        @PETSC_LIBRARIES@
      )
    else()
      list(APPEND gp_libs
        @PETSC_LDFLAGS@
        @PETSC_STATIC_LDFLAGS@
      )
    endif()
    list(APPEND gp_include
      @PETSC_INCLUDE_DIRS@
    )
  endif()

  if (GRIDPACK_HAVE_GA)
    list(APPEND gp_include
      @GRIDPACK_GA_INCLUDE_DIRS@
    )
    list(APPEND gp_libs
      @GRIDPACK_GA_LIBRARIES@
    )
  endif()

  if (GRIDPACK_HAVE_GOSS)
    list(APPEND gp_include
      @GRIDPACK_GOSS_INCLUDE_DIRS@
      @GRIDPACK_APR_INCLUDE_DIRS@
    )
    list(APPEND gp_libs
      @GRIDPACK_GOSS_LIBRARIES@
      @GRIDPACK_APR_LIBRARIES@
    )
  endif()

  if (GRIDPACK_HAVE_CPLEX)
    list(APPEND gp_libs @CPLEX_LIBRARIES@)
  endif()

  if (GRIDPACK_HAVE_GLPK)
    list(APPEND gp_libs @GLPK_LIBRARY@)
  endif()

#  list(APPEND gp_include 
#    @Boost_INCLUDE_DIR@
#    @MPI_INCLUDE_PATH@
#  )

#  list(APPEND gp_libs
#    @Boost_LIBRARIES@
#    @MPI_CXX_LIBRARIES@
#  )

  set(GRIDPACK_INCLUDE_DIRS
    ${gp_include}
    CACHE STRING "Include directories for GridPACK"
  )

  set(GRIDPACK_LIBS
    ${gp_libs}
    CACHE STRING "Libraries for GridPACK"
  )

  # this needs to be better -- any defined macro used in a public
  # header needs to be included here
  set(gp_defs "")
  if(ENABLE_ENVIRONMENT_FROM_COMM)
    list(APPEND gp_defs "-DENABLE_ENVIRONMENT_FROM_COMM=1")
  endif(ENABLE_ENVIRONMENT_FROM_COMM)

  set(GRIDPACK_DEFINITIONS ${gp_defs}
    CACHE STRING "Any compiler definitions/flags set in the GridPACK configuration"
  )

  message(STATUS "GridPACK compiler defines: ${gp_defs}")
  message(STATUS "Include directories for GridPACK: ${gp_include}")
  message(STATUS "Libraries for GridPACK: ${gp_libs}")

endfunction(gridpack_setup)

set(GRIDPACK_C_COMPILER @CMAKE_C_COMPILER@)
set(GRIDPACK_C_FLAGS "@CMAKE_C_FLAGS@")
set(GRIDPACK_C_FLAGS_DEBUG "@CMAKE_C_FLAGS_DEBUG@")
set(GRIDPACK_C_FLAGS_RELEASE "@CMAKE_C_FLAGS_RELEASE@")
set(GRIDPACK_C_FLAGS_RELWITHDEBINFO "@CMAKE_C_FLAGS_RELWITHDEBINFO@")

set(GRIDPACK_CXX_COMPILER @CMAKE_CXX_COMPILER@)
set(GRIDPACK_CXX_FLAGS "@CMAKE_CXX_FLAGS@")
set(GRIDPACK_CXX_FLAGS_DEBUG "@CMAKE_CXX_FLAGS_DEBUG@")
set(GRIDPACK_CXX_FLAGS_RELEASE "@CMAKE_CXX_FLAGS_RELEASE@")
set(GRIDPACK_CXX_FLAGS_RELWITHDEBINFO "@CMAKE_CXX_FLAGS_RELWITHDEBINFO@")

set(ENV{C} ${GRIDPACK_C_COMPILER})
set(ENV{CXX} ${GRIDPACK_CXX_COMPILER})

set(CMAKE_C_FLAGS ${GRIDPACK_C_FLAGS})
set(CMAKE_C_FLAGS_DEBUG ${GRIDPACK_C_FLAGS_DEBUG})
set(CMAKE_C_FLAGS_RELEASE ${GRIDPACK_C_FLAGS_RELEASE})
set(CMAKE_C_FLAGS_RELWITHDEBINFO ${GRIDPACK_C_FLAGS_RELWITHDEBINFO})

set(CMAKE_CXX_FLAGS ${GRIDPACK_CXX_FLAGS})
set(CMAKE_CXX_FLAGS_DEBUG ${GRIDPACK_CXX_FLAGS_DEBUG})
set(CMAKE_CXX_FLAGS_RELEASE ${GRIDPACK_CXX_FLAGS_RELEASE})
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ${GRIDPACK_CXX_FLAGS_RELWITHDEBINFO})
